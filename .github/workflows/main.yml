name: Build/Test

on:
  push: ~
  pull_request: ~
  workflow_dispatch: ~

env:
  BUILD_DIR: "${{github.workspace}}/build-release"
  QT_VERSION: 6.8

defaults:
  run:
    shell: bash

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        system:
          - os: ubuntu-latest
            cmake_preset: linux-release
          - os: windows-latest
            cmake_preset: windows-release
            qt_arch: win64_msvc2022_64
    runs-on: ${{matrix.system.os}}
    steps:
      #######################
      # SETUP
      #######################
      - uses: actions/checkout@v4

      - name: Install System Packages (Linux)
        if: ${{runner.os == 'Linux'}}
        run: |
          sudo apt-get update
          sudo apt-get -y install qt6-base-dev libqt6svg6-dev qt6-tools-dev libglx-dev libgl1-mesa-dev ninja-build

      - name: Install System Packages (Windows)
        if: ${{runner.os == 'Windows'}}
        run: |
          choco install ninja -y

      - name: Install Qt
        # Don't need this on Linux, as Qt will come from the system package manager above
        if: ${{runner.os != 'Linux'}}
        uses: jurplel/install-qt-action@v4
        with:
          dir: ${{github.workspace}}/.qt
          version: ${{env.QT_VERSION}}
          arch: ${{matrix.system.qt_arch}}
          cache: true

      #######################
      # BUILD
      #######################
      - name: Configure CMake
        run: >
          cmake
          -S "${{github.workspace}}"
          -B "${BUILD_DIR}"
          --preset=${{matrix.system.cmake_preset}}
          -DCMAKE_INSTALL_PREFIX="${{github.workspace}}/install_root"
          -DBUILD_TESTING=On
          -DBUILD_PACKAGE=On
      - name: Build
        shell: bash
        run: cmake --build "${BUILD_DIR}"

      #######################
      # TEST
      #######################
      - name: Test
        working-directory: ${{env.BUILD_DIR}}
        shell: bash
        run: ctest
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: test_results_${{runner.os}}
          path: ${{env.BUILD_DIR}}/Testing/Temporary/LastTest.log

      #######################
      # PACKAGE
      #######################
      - name: Package
        working-directory: ${{env.BUILD_DIR}}
        shell: bash
        run: cpack -B "${BUILD_DIR}/packages"
      - name: Upload failed package artifacts
        uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: failed_package_${{runner.os}}
          path: ${{env.BUILD_DIR}}/packages
      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: packages
          path: ${{env.BUILD_DIR}}/packages/*.*
          if-no-files-found: error

  #######################
  # RELEASE
  #######################
  release:
    needs:
      - build
    runs-on: ubuntu-latest
    if: ${{ github.ref_type == 'tag' }}
    steps:
      - uses: actions/checkout@v4
        with:
          path: repo
      - name: Get built packages
        uses: actions/download-artifact@v4
        id: download
        with:
          name: packages
          path: packages
      - name: Determine channel
        id: channel
        uses: dkershner6/switch-case-action@v1
        with:
          default: "dev"
          conditionals-with-values: |
            ${{ startsWith(github.ref_name, 'v') }} => main
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          prerelease: ${{ steps.channel.outputs.value != 'main' }}
          draft: true
          tag_name: ${{ github.ref_name }}
          fail_on_unmatched_files: true
          generate_release_notes: true
          files: ${{steps.download.outputs.download-path}}/*
