name: Build/Test

on:
  push: ~
  pull_request: ~
  workflow_dispatch: ~

env:
  BUILD_TYPE: Release
  SOURCE_DIR: ${{github.workspace}}
  BUILD_DIR: ${{github.workspace}}/build
  QT_VERSION: 6.6.*
  # Increment when the cache must be invalidated.
  CACHE_IX: 0

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-2022
    runs-on: ${{matrix.os}}
    steps:
      - name: Get number of CPU cores
        uses: SimenB/github-actions-cpu-cores@v1
        id: cpu-cores
      - name: Set CMake Parallel level
        run: |
          echo "CMAKE_BUILD_PARALLEL_LEVEL=${{ steps.cpu-cores.outputs.count }}" >> ${GITHUB_ENV}
          echo "CTEST_PARALLEL_LEVEL=1" >> ${GITHUB_ENV}
      #######################
      # BUILD
      #######################
      - uses: actions/checkout@v3
      - name: Create Build Environment
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        # Telling cmake to make the directory adapts the different syntax for each platform
        run: cmake -E make_directory "${BUILD_DIR}"
      - name: Install Qt
        # Don't need this on Linux, as Qt will come from the system package manager above
        if: ${{runner.os != 'Linux'}}
        uses: jurplel/install-qt-action@v3
        with:
          dir: ${{github.workspace}}/.qt
          version: ${{env.QT_VERSION}}
          cache: true
      - name: Configure CMake
        shell: bash
        run: cmake -S "${SOURCE_DIR}" -B "${BUILD_DIR}" -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DBUILD_TESTING=On -DBUILD_PACKAGE=On -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake
      - name: Build
        shell: bash
        run: cmake --build "${BUILD_DIR}" --config ${BUILD_TYPE}

      #######################
      # TEST
      #######################
      - name: Test
        working-directory: ${{env.BUILD_DIR}}
        shell: bash
        run: ctest -C ${BUILD_TYPE}
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: test_results_${{runner.os}}
          path: ${{env.BUILD_DIR}}/Testing/Temporary/LastTest.log

      #######################
      # PACKAGE
      #######################
      - name: Package (macOS)
        if: ${{runner.os == 'macOS'}}
        working-directory: ${{env.BUILD_DIR}}
        shell: bash
        run: cpack -B "${BUILD_DIR}/packages"
      - name: Package (Windows)
        if: ${{runner.os == 'Windows'}}
        working-directory: ${{env.BUILD_DIR}}
        shell: bash
        run: cpack -B "${BUILD_DIR}/packages"
      - name: Package (Linux)
        if: ${{runner.os == 'Linux'}}
        working-directory: ${{env.BUILD_DIR}}
        shell: bash
        run: cpack -B "${BUILD_DIR}/packages"
      - name: Upload failed package artifacts
        uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: failed_package_${{runner.os}}
          path: ${{env.BUILD_DIR}}/packages
      - name: Upload packages
        uses: actions/upload-artifact@v3
        with:
          name: packages
          path: ${{env.BUILD_DIR}}/packages/*.*
          if-no-files-found: error
