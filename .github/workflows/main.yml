name: Build/Test

on:
  push: ~
  pull_request: ~
  workflow_dispatch: ~

env:
  BUILD_TYPE: Release
  SOURCE_DIR: ${{github.workspace}}
  BUILD_DIR: ${{github.workspace}}/build
  QT_VERSION: 6.6.*
  # Increment when the cache must be invalidated.
  CACHE_IX: 0

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-2022
    runs-on: ${{matrix.os}}
    env:
      # See https://learn.microsoft.com/en-us/vcpkg/consume/binary-caching-github-actions-cache
      VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
      DSA_PRIV: ${{ secrets.DSA_PRIV }}
    steps:
      - name: Get number of CPU cores
        uses: SimenB/github-actions-cpu-cores@v2
        id: cpu-cores
      - name: Set CMake Parallel level
        run: |
          echo "CMAKE_BUILD_PARALLEL_LEVEL=${{ steps.cpu-cores.outputs.count }}" >> ${GITHUB_ENV}
          echo "CTEST_PARALLEL_LEVEL=1" >> ${GITHUB_ENV}
      # See https://learn.microsoft.com/en-us/vcpkg/consume/binary-caching-github-actions-cache
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
      #######################
      # BUILD
      #######################
      - uses: actions/checkout@v4
      - name: Create Build Environment
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        # Telling cmake to make the directory adapts the different syntax for each platform
        run: cmake -E make_directory "${BUILD_DIR}"
      - name: Get signing key
        shell: bash
        if: ${{ env.DSA_PRIV != '' }}
        run: |
          echo "${DSA_PRIV}" > "${BUILD_DIR}/dsa_priv.pem"
      - name: Install Qt
        # Don't need this on Linux, as Qt will come from the system package manager above
        if: ${{runner.os != 'Linux'}}
        uses: jurplel/install-qt-action@v3
        with:
          dir: ${{github.workspace}}/.qt
          version: ${{env.QT_VERSION}}
          cache: true
      - name: Configure CMake
        shell: bash
        run: cmake -S "${SOURCE_DIR}" -B "${BUILD_DIR}" -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DBUILD_TESTING=On -DBUILD_PACKAGE=On -DDSA_PRIV=${{github.workspace}}/build/dsa_priv.pem -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake
      - name: Build
        shell: bash
        run: cmake --build "${BUILD_DIR}" --config ${BUILD_TYPE}

      #######################
      # TEST
      #######################
      - name: Test
        working-directory: ${{env.BUILD_DIR}}
        shell: bash
        run: ctest -C ${BUILD_TYPE}
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: test_results_${{runner.os}}
          path: ${{env.BUILD_DIR}}/Testing/Temporary/LastTest.log

      #######################
      # PACKAGE
      #######################
      - name: Package
        working-directory: ${{env.BUILD_DIR}}
        shell: bash
        run: cpack -B "${BUILD_DIR}/packages"
      - name: Upload failed package artifacts
        uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: failed_package_${{runner.os}}
          path: ${{env.BUILD_DIR}}/packages
      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: packages
          path: ${{env.BUILD_DIR}}/packages/*.*
          if-no-files-found: error

  #######################
  # RELEASE
  #######################
  release:
    needs:
      - build
    runs-on: ubuntu-latest
    if: ${{ github.ref_type == 'tag' }}
    steps:
      - uses: actions/checkout@v3
        with:
          path: repo
      - name: Get built packages
        uses: actions/download-artifact@v4
        id: download
        with:
          name: packages
          path: packages
      - name: Determine channel
        id: channel
        uses: dkershner6/switch-case-action@v1
        with:
          default: "dev"
          conditionals-with-values: |
            ${{ startsWith(github.ref_name, 'v') }} => main
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          prerelease: ${{ steps.channel.outputs.value != 'main' }}
          draft: true
          tag_name: ${{ github.ref_name }}
          fail_on_unmatched_files: true
          generate_release_notes: true
          files: ${{steps.download.outputs.download-path}}/*
